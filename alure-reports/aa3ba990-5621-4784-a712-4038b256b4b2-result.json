{"name": "test_01_intro_reg_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom no such execution context: loader has changed while resolving nodes\n  (Session info: chrome=116.0.5845.111)\nStacktrace:\n\tGetHandleVerifier [0x00A437C3+48947]\n\t(No symbol) [0x009D8551]\n\t(No symbol) [0x008DC92D]\n\t(No symbol) [0x008DF4B1]\n\t(No symbol) [0x008E106A]\n\t(No symbol) [0x008E1110]\n\t(No symbol) [0x0092C6E1]\n\t(No symbol) [0x0092B3CC]\n\t(No symbol) [0x00924E86]\n\t(No symbol) [0x009016C7]\n\t(No symbol) [0x0090284D]\n\tGetHandleVerifier [0x00C8FDF9+2458985]\n\tGetHandleVerifier [0x00CD744F+2751423]\n\tGetHandleVerifier [0x00CD1361+2726609]\n\tGetHandleVerifier [0x00AC0680+560624]\n\t(No symbol) [0x009E238C]\n\t(No symbol) [0x009DE268]\n\t(No symbol) [0x009DE392]\n\t(No symbol) [0x009D10B7]\n\tBaseThreadInitThunk [0x75A300C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x778A7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x778A7AEE+238]", "trace": "self = <test_page_tester.TestBuymePages testMethod=test_01_intro_reg_page>\n\n    def setUp(self):\n        if browser == 'chrome':\n>           self.driver = webdriver.Chrome(service=Service(chrome_driver_patch))\n\ntest_page_tester.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\bymesite-test-mNVtXinU-py3.11\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\bymesite-test-mNVtXinU-py3.11\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\bymesite-test-mNVtXinU-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\bymesite-test-mNVtXinU-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\bymesite-test-mNVtXinU-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002074C1B5950>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom no such execut...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x778A7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x778A7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from no such execution context: loader has changed while resolving nodes\nE         (Session info: chrome=116.0.5845.111)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A437C3+48947]\nE       \t(No symbol) [0x009D8551]\nE       \t(No symbol) [0x008DC92D]\nE       \t(No symbol) [0x008DF4B1]\nE       \t(No symbol) [0x008E106A]\nE       \t(No symbol) [0x008E1110]\nE       \t(No symbol) [0x0092C6E1]\nE       \t(No symbol) [0x0092B3CC]\nE       \t(No symbol) [0x00924E86]\nE       \t(No symbol) [0x009016C7]\nE       \t(No symbol) [0x0090284D]\nE       \tGetHandleVerifier [0x00C8FDF9+2458985]\nE       \tGetHandleVerifier [0x00CD744F+2751423]\nE       \tGetHandleVerifier [0x00CD1361+2726609]\nE       \tGetHandleVerifier [0x00AC0680+560624]\nE       \t(No symbol) [0x009E238C]\nE       \t(No symbol) [0x009DE268]\nE       \t(No symbol) [0x009DE392]\nE       \t(No symbol) [0x009D10B7]\nE       \tBaseThreadInitThunk [0x75A300C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x778A7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x778A7AEE+238]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\bymesite-test-mNVtXinU-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1693097673948, "stop": 1693097678242, "uuid": "16575cda-aa47-4bb2-b850-93aa1a8724d9", "historyId": "a91bd283c83a1a37928ff5cb5c91c6d4", "testCaseId": "a91bd283c83a1a37928ff5cb5c91c6d4", "fullName": "test_page_tester.TestBuymePages#test_01_intro_reg_page", "labels": [{"name": "suite", "value": "test_page_tester"}, {"name": "subSuite", "value": "TestBuymePages"}, {"name": "host", "value": "DESKTOP-HNT144Q"}, {"name": "thread", "value": "11052-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_page_tester"}]}